buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}

plugins {
    id 'java'
    id 'io.freefair.lombok' version '6.+'
    id 'org.ajoberstar.grgit' version '4.1.1'
    id 'wtf.gofancy.fancygradle' version '1.+'
    id 'se.bjurr.gitchangelog.git-changelog-gradle-plugin' version '1.+'
}

apply plugin: 'net.minecraftforge.gradle'

java.toolchain.languageVersion = JavaLanguageVersion.of(8)
lombok.version = "1.18.22"

def hasUuid = project.hasProperty('uuid')
def hasUsername = project.hasProperty('username')
def hasAaccessToken = project.hasProperty('accessToken')
def SNAPSHOT = false

version = "${mc_version}-${version_full}${t -> if (SNAPSHOT) t << '-snapshot.' + grgit.head().abbreviatedId}"
group = "micdoodle8.mods.galacticraft"
archivesBaseName = "Galacticraft"

minecraft {
    mappings channel: "${mapping_channel}", version: "${mapping_version}"

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            if (hasUuid) 		 { args '--uuid', project.uuid }
            if (hasUsername) 	 { args '--username', project.username }
            if (hasAaccessToken) { args '--accessToken', project.accessToken }
                
            jvmArg '-Dfml.coreMods.load=micdoodle8.mods.miccore.MicdoodlePlugin'
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            
            jvmArg '-Dfml.coreMods.load=micdoodle8.mods.miccore.MicdoodlePlugin'
        }
    }
}

fancyGradle {
    patches {
        resources
        coremods
        asm
    }
}

apply from: 'gradle/dependencies.gradle'
def core = 'MicdoodleCore'
def path = 'micdoodle8.mods'

task coreJar(type: Jar) {
	archiveVersion.set("${version_full}")
	archiveBaseName.set("MicdoodleCore")
    from(sourceSets.main.output) {
        include 'micdoodle8/mods/miccore/**'
        include 'micdoodle8/mods/galacticraft/api/entity/IEntityBreathable.class'
        include 'META-INF/*.cfg'
    }
    manifest {
        attributes "FMLCorePlugin": "micdoodle8.mods.miccore.MicdoodlePlugin"
        attributes 'Maven-Artifact': path + ":" + core + ":" + "${version_full}"
    }
    group = 'build'
}

def getManifestAttributes() {
    return [
            'Specification-Title'         : 'Galacticraft',
            'Specification-Vendor'        : 'TeamGalacticraft',
            'Specification-Version'       : version.split("-")[1],
            'Implementation-Title'        : project.group,
            'Implementation-Version'      : version.split("-")[1],
            'Implementation-Vendor'       : 'Galacticraft',
            'Implementation-Timestamp'    : new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            'FMLAT'                       : 'accesstransformer.cfg',
            'ContainedDeps'				  : 'META-INF/libraries/' + coreJar.archivePath.name,
            'Build-Against'				  : "Forge: ${forge_version}",
            'Built-Using'				  : "ForgeGradle: 5.1.+",
            'Git-Commit'				  : grgit.head().abbreviatedId,
            'Git-Branch'                  : grgit.branch.current().getName(),
            'Maven-Artifact'			  : group + ":" + archivesBaseName + ":" + "${version_full}"
    ]
}

jar.dependsOn('coreJar')

jar {
	duplicatesStrategy(DuplicatesStrategy.FAIL)
    manifest.attributes(getManifestAttributes())

    exclude 'micdoodle8/mods/miccore/**'
    
    from(coreJar.archivePath.absolutePath) {
        include '*'
        into 'META-INF/libraries/'
    }
}

jar.finalizedBy('reobfJar')

task apiJar(type: Jar) {
    duplicatesStrategy(DuplicatesStrategy.FAIL)
    archiveClassifier.set("api")
    from(sourceSets.main.java) {
        include 'micdoodle8/mods/galacticraft/api/**'
    }
}

task deobfJar(type: Jar) {
    duplicatesStrategy(DuplicatesStrategy.FAIL)
    archiveClassifier.set("deobf")
    from sourceSets.main.output
    manifest.attributes(getManifestAttributes())
}

task sourcesJar(type: Jar, dependsOn: classes) {
	duplicatesStrategy(DuplicatesStrategy.FAIL)
	archiveClassifier.set("sources")
    from(sourceSets.main.allJava)
    manifest.attributes(getManifestAttributes())
}

artifacts {
	archives jar
    archives deobfJar
    archives sourcesJar
    archives apiJar
}

task generateChangelog(type: se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask) {
    group = 'script-tasks'
    fromRepo = file(".");
    settingsFile = file("changelog.json").getAbsolutePath();
    file = file("${projectDir}/CHANGELOG-${project.version}.md");
    templateContent = file('changelog.mustache').getText('UTF-8');
}

apply from: 'gradle/maven.gradle'
apply from: 'gradle/resources.gradle'
