buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}

plugins {
    id 'java'
    id 'org.ajoberstar.reckon' version '0.13.2'
    id 'org.ajoberstar.grgit' version '4.1.1'
    id 'io.freefair.lombok' version '6.4.1'
    id 'wtf.gofancy.fancygradle' version '1.+'
}

apply plugin: 'net.minecraftforge.gradle'
java.toolchain.languageVersion = JavaLanguageVersion.of(8)

reckon {
    scopeFromProp()
    stageFromProp('rc', 'final')
    snapshotFromProp()
}

group = "micdoodle8.mods.galacticraft"
archivesBaseName = "Galacticraft"

repositories {
    mavenCentral()
    maven { url 'https://maven.galacticraft.dev/releases' }
    maven { url 'https://www.cursemaven.com' }
    maven { url 'https://mod-buildcraft.com/maven/' }
    maven { url 'https://maven.ic2.player.to' }
    maven { url 'https://dvs1.progwml6.com/files/maven' }
    
    all {
        ArtifactRepository repo ->
        if (repo instanceof MavenArtifactRepository) {
            if ((repo.url.toString() == 'files.minecraftforge.net') ||
                (repo.url.toString() == 'maven.minecraftforge.net')) {
                remove repo
            }
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"
    implementation fg.deobf('curse.maven:bop-7.0.1.2444-220318:2842510')
    implementation fg.deobf('curse.maven:mekanism-9.8.3.390-268560:2835175')
    implementation fg.deobf('curse.maven:ae2-rv6-stable-7-223794:2747063')
    implementation fg.deobf('curse.maven:redstoneflux-1.1.1-270789:2920436')
    implementation fg.deobf('curse.maven:actuallyadditions-r152-228404:3117927')
    implementation fg.deobf('curse.maven:playerapi-1.1-449521:3212872')
    compileOnly fg.deobf('com.mod-buildcraft:buildcraft-api:7.99.24.8')
    runtimeOnly fg.deobf('com.mod-buildcraft:buildcraft-main:7.99.24.8')
    implementation fg.deobf('net.industrial-craft:industrialcraft-2:2.8.221-ex112')
    compileOnly fg.deobf('mezz.jei:jei_1.12.2:4.16.1.302:api')
    runtimeOnly fg.deobf('mezz.jei:jei_1.12.2:4.16.1.302')
}

minecraft {
    mappings channel: "${mapping_channel}", version: "${mapping_version}"

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            if (project.hasProperty('uuid'))
                args '--uuid', project.getProperty('uuid')
            if (project.hasProperty('username'))
                args '--username', project.getProperty('username')
            jvmArg '-Dfml.coreMods.load=micdoodle8.mods.miccore.MicdoodlePlugin'
        }
        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            jvmArg '-Dfml.coreMods.load=micdoodle8.mods.miccore.MicdoodlePlugin'
        }
    }
}

fancyGradle {
    patches {
        resources
        coremods
        asm
    }
}

def setManifest = { Manifest manifest->
    manifest.attributes(
        [
            'Specification-Title'         : 'Galacticraft',
            'Specification-Vendor'        : 'TeamGalacticraft',
            'Specification-Version'       : "${version}",
            'Implementation-Title'        : 'Galacticraft',
            'Implementation-Version'      : "${version}",
            'Implementation-Vendor'       : 'TeamGalacticraft',
            'Implementation-Timestamp'    : new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            'FMLAT'                       : 'accesstransformer.cfg',
            'FMLCorePluginContainsFMLMod' : 'true',
            'FMLCorePlugin'               : 'micdoodle8.mods.miccore.MicdoodlePlugin',
            'Built-On-Minecraft'          : "${mc_version}",
            'Built-On-Forge'              : "${forge_version}",
            'Built-On-Mapping'            : "${mapping_channel}-${mapping_version}",
            'Built-Using'                 : "ForgeGradle: 5.1.+"
        ] as LinkedHashMap
    )
}

jar {
    manifest(setManifest)
    archiveVersion.set("${mc_version}-${version}")
}

jar.finalizedBy('reobfJar')

task sourcesJar(type: Jar) {
    duplicatesStrategy(DuplicatesStrategy.FAIL)
    archiveClassifier.set('sources')
    archiveVersion.set("${mc_version}-${version}")
    from sourceSets.main.allSource    
}

artifacts {
    archives sourcesJar
}

apply from: 'gradle/maven.gradle'
apply from: 'gradle/resources.gradle'

clean {
    def filteredDelete = new HashSet<>()
    for (def toDelete : getDelete()) {
        for (def f : file(toDelete).listFiles()) {
            if (f.getName() != "fg_cache") {
                filteredDelete.add(f)
            }
        }
    }
    setDelete(filteredDelete)
}
