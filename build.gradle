import groovy.json.JsonOutput
import groovy.json.JsonSlurper

buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}

plugins {
    id 'java'
    id 'eclipse'
    id 'idea'
    id "io.freefair.lombok" version "6.3.0"
    id 'wtf.gofancy.fancygradle' version '1.+'
    id "se.bjurr.gitchangelog.git-changelog-gradle-plugin" version "1.71.4"
}

apply plugin: 'net.minecraftforge.gradle'
defaultTasks 'fullBuild'

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

def build = System.getenv("BUILD_NUMBER") != null ? System.getenv("BUILD_NUMBER") : 'DEV'

version = "${gcVersion}.${build}"
group= "micdoodle8.mods.galacticraft"
archivesBaseName = "GalacticraftAll"

task generateChangelog(type: se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask) {
    group = 'script-tasks'
    description = 'Generates Changelog for provided Version'

    fromRepo = file(".");
    settingsFile = file("changelog.json").getAbsolutePath();
    file = file("${projectDir}/CHANGELOG-${project.version}.md");
    templateContent = file('changelog.mustache').getText('UTF-8');
}

ext {
    artifactsList = []
    generateChangelog = 'generateChangelog'
}

apply from: 'gradle/minecraft.gradle'
apply from: 'gradle/outputs.gradle'
apply from: 'gradle/maven.gradle'

lombok {
    version = "1.18.22"
}

def modFileTokens = [ gcVersion: version.toString() ]
def included = ["micdoodle8/mods/galacticraft/core/Constants.java"]
def expandedSrc = new File(project.buildDir, 'expandedSrc')
def srcMainJava = project.file('src/main/java').toPath()

task javaReplaceTokens(type: Copy) {
    inputs.property 'tokens', modFileTokens
    from(srcMainJava) {
        include included
    }
    into expandedSrc
    filter(org.apache.tools.ant.filters.ReplaceTokens, beginToken: '${', endToken: '}', tokens: modFileTokens)
}

compileJava {
	def includedPaths = included.collect { java.nio.file.Paths.get(it) }
    dependsOn javaReplaceTokens
    exclude {
        srcMainJava.relativize(it.file.toPath()) in includedPaths
    }
    source expandedSrc
    
    options.compilerArgs << "-Xlint:none"
    options.encoding = 'UTF-8'
    options.fork = true
    options.incremental = true
}

tasks.withType(Javadoc) {
      failOnError false
      options.memberLevel = JavadocMemberLevel.PUBLIC
      options.encoding = 'UTF-8'
      options.charSet = 'UTF-8'
      options.links = ["https://docs.oracle.com/javase/8/docs/api/".toString()]
}

task fullBuild(type: Delete) {
    delete jar
    dependsOn "buildAllJars"
}

jar.finalizedBy('reobfJar')